<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Middlewares on Fast and unfancy HTTP server framework for Go (Golang) - LabStack Echo</title>
    <link>https://echo.labstack.com/middleware/</link>
    <description>Recent content in Middlewares on Fast and unfancy HTTP server framework for Go (Golang) - LabStack Echo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://echo.labstack.com/middleware/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add Trailing Slash</title>
      <link>https://echo.labstack.com/middleware/add-trailing-slash</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/add-trailing-slash</guid>
      <description>

&lt;h2 id=&#34;addtrailingslash-middleware&#34;&gt;AddTrailingSlash Middleware&lt;/h2&gt;

&lt;p&gt;AddTrailingSlash middleware adds a trailing slash to the request URI.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;TrailingSlashConfig struct {
  // Status code to be used when redirecting the request.
  // Optional, but when provided the request is redirected using this code.
  RedirectCode int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Pre(middleware.AddTrailingSlash())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.AddTrailingSlashWithConfig(TrailingSlashConfig{
  RedirectCode: http.StatusMovedPermanently,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will add a trailing slash to the request URI and redirect with &lt;code&gt;StatusMovedPermanently&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Auth</title>
      <link>https://echo.labstack.com/middleware/basic-auth</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/basic-auth</guid>
      <description>

&lt;h2 id=&#34;basicauth-middleware&#34;&gt;BasicAuth Middleware&lt;/h2&gt;

&lt;p&gt;BasicAuth middleware provides an HTTP basic authentication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For valid credentials it calls the next handler.&lt;/li&gt;
&lt;li&gt;For invalid credentials, it sends &amp;ldquo;401 - Unauthorized&amp;rdquo; response.&lt;/li&gt;
&lt;li&gt;For empty or invalid &lt;code&gt;Authorization&lt;/code&gt; header, it sends &amp;ldquo;400 - Bad Request&amp;rdquo; response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.BasicAuth(func(username, password string) bool {
	if username == &amp;quot;joe&amp;quot; &amp;amp;&amp;amp; password == &amp;quot;secret&amp;quot; {
		return true
	}
	return false
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Body Limit</title>
      <link>https://echo.labstack.com/middleware/body-limit</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/body-limit</guid>
      <description>

&lt;h2 id=&#34;bodylimit-middleware&#34;&gt;BodyLimit Middleware&lt;/h2&gt;

&lt;p&gt;BodyLimit middleware sets the maximum allowed size for a request body, if the
size exceeds the configured limit, it sends &amp;ldquo;413 - Request Entity Too Large&amp;rdquo;
response. The body limit is determined based on both &lt;code&gt;Content-Length&lt;/code&gt; request
header and actual content read, which makes it super secure.&lt;/p&gt;

&lt;p&gt;Limit can be specified as &lt;code&gt;4x&lt;/code&gt; or &lt;code&gt;4xB&lt;/code&gt;, where x is one of the multiple from K, M,
G, T or P.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.BodyLimit(&amp;quot;2M&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CORS</title>
      <link>https://echo.labstack.com/middleware/cors</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/cors</guid>
      <description>

&lt;h2 id=&#34;cors-middleware&#34;&gt;CORS Middleware&lt;/h2&gt;

&lt;p&gt;CORS middleware implements &lt;a href=&#34;http://www.w3.org/TR/cors&#34;&gt;CORS&lt;/a&gt; specification.
CORS gives web servers cross-domain access controls, which enable secure cross-domain
data transfers.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;CORSConfig struct {
  // AllowOrigin defines a list of origins that may access the resource.
  // Optional. Default value []string{&amp;quot;*&amp;quot;}.
  AllowOrigins []string

  // AllowMethods defines a list methods allowed when accessing the resource.
  // This is used in response to a preflight request.
  // Optional. Default value DefaultCORSConfig.AllowMethods.
  AllowMethods []string

  // AllowHeaders defines a list of request headers that can be used when
  // making the actual request. This in response to a preflight request.
  // Optional. Default value []string{}.
  AllowHeaders []string

  // AllowCredentials indicates whether or not the response to the request
  // can be exposed when the credentials flag is true. When used as part of
  // a response to a preflight request, this indicates whether or not the
  // actual request can be made using credentials.
  // Optional. Default value false.
  AllowCredentials bool

  // ExposeHeaders defines a whitelist headers that clients are allowed to
  // access.
  // Optional. Default value []string{}.
  ExposeHeaders []string

  // MaxAge indicates how long (in seconds) the results of a preflight request
  // can be cached.
  // Optional. Default value 0.
  MaxAge int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultCORSConfig = CORSConfig{
	AllowOrigins: []string{&amp;quot;*&amp;quot;},
	AllowMethods: []string{echo.GET, echo.HEAD, echo.PUT, echo.PATCH, echo.POST, echo.DELETE},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.CORS())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
  AllowOrigins: []string{&amp;quot;https://labstack.com&amp;quot;, &amp;quot;https://labstack.net&amp;quot;},
  AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CSRF</title>
      <link>https://echo.labstack.com/middleware/csrf</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/csrf</guid>
      <description>

&lt;h2 id=&#34;csrf-middleware&#34;&gt;CSRF Middleware&lt;/h2&gt;

&lt;p&gt;Cross-site request forgery, also known as one-click attack or session riding and
abbreviated as CSRF (sometimes pronounced sea-surf) or XSRF, is a type of malicious
exploit of a website where unauthorized commands are transmitted from a user that
the website trusts.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;CSRFConfig struct {
  // Key to create CSRF token.
  Secret []byte `json:&amp;quot;secret&amp;quot;`

  // TokenLookup is a string in the form of &amp;quot;&amp;lt;source&amp;gt;:&amp;lt;key&amp;gt;&amp;quot; that is used
  // to extract token from the request.
  // Optional. Default value &amp;quot;header:X-CSRF-Token&amp;quot;.
  // Possible values:
  // - &amp;quot;header:&amp;lt;name&amp;gt;&amp;quot;
  // - &amp;quot;form:&amp;lt;name&amp;gt;&amp;quot;
  // - &amp;quot;header:&amp;lt;name&amp;gt;&amp;quot;
  TokenLookup string `json:&amp;quot;token_lookup&amp;quot;`

  // Context key to store generated CSRF token into context.
  // Optional. Default value &amp;quot;csrf&amp;quot;.
  ContextKey string `json:&amp;quot;context_key&amp;quot;`

  // Name of the CSRF cookie. This cookie will store CSRF token.
  // Optional. Default value &amp;quot;csrf&amp;quot;.
  CookieName string `json:&amp;quot;cookie_name&amp;quot;`

  // Domain of the CSRF cookie.
  // Optional. Default value none.
  CookieDomain string `json:&amp;quot;cookie_domain&amp;quot;`

  // Path of the CSRF cookie.
  // Optional. Default value none.
  CookiePath string `json:&amp;quot;cookie_path&amp;quot;`

  // Expiration time of the CSRF cookie.
  // Optional. Default value 24H.
  CookieExpires time.Time `json:&amp;quot;cookie_expires&amp;quot;`

  // Indicates if CSRF cookie is secure.
  CookieSecure bool `json:&amp;quot;cookie_secure&amp;quot;`
  // Optional. Default value false.

  // Indicates if CSRF cookie is HTTP only.
  // Optional. Default value false.
  CookieHTTPOnly bool `json:&amp;quot;cookie_http_only&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultCSRFConfig = CSRFConfig{
  TokenLookup:   &amp;quot;header:&amp;quot; + echo.HeaderXCSRFToken,
  ContextKey:    &amp;quot;csrf&amp;quot;,
  CookieName:    &amp;quot;csrf&amp;quot;,
  CookieExpires: time.Now().Add(24 * time.Hour),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.CSRF(&amp;quot;secret&amp;quot;))&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{
  TokenLookup: &amp;quot;header:X-XSRF-TOKEN&amp;quot;,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example above uses &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; request header to extract CSRF token.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gzip</title>
      <link>https://echo.labstack.com/middleware/gzip</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/gzip</guid>
      <description>

&lt;h2 id=&#34;gzip-middleware&#34;&gt;Gzip Middleware&lt;/h2&gt;

&lt;p&gt;Gzip middleware compresses HTTP response using gzip compression scheme.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;GzipConfig struct {
  // Gzip compression level.
  // Optional. Default value -1.
  Level int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultGzipConfig = GzipConfig{
  Level: -1,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.Gzip())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.GzipWithConfig(middleware.GzipConfig{
  Level: 5
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>https://echo.labstack.com/middleware/jwt</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/jwt</guid>
      <description>

&lt;h2 id=&#34;jwt-middleware&#34;&gt;JWT Middleware&lt;/h2&gt;

&lt;p&gt;JWT provides a JSON Web Token (JWT) authentication middleware.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For valid token, it sets the user in context and calls next handler.&lt;/li&gt;
&lt;li&gt;For invalid token, it sends &amp;ldquo;401 - Unauthorized&amp;rdquo; response.&lt;/li&gt;
&lt;li&gt;For empty or invalid &lt;code&gt;Authorization&lt;/code&gt; header, it sends &amp;ldquo;400 - Bad Request&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;JWTConfig struct {
  // Signing key to validate token.
  // Required.
  SigningKey []byte `json:&amp;quot;signing_key&amp;quot;`

  // Signing method, used to check token signing method.
  // Optional. Default value HS256.
  SigningMethod string `json:&amp;quot;signing_method&amp;quot;`

  // Context key to store user information from the token into context.
  // Optional. Default value &amp;quot;user&amp;quot;.
  ContextKey string `json:&amp;quot;context_key&amp;quot;`

  // TokenLookup is a string in the form of &amp;quot;&amp;lt;source&amp;gt;:&amp;lt;name&amp;gt;&amp;quot; that is used
  // to extract token from the request.
  // Optional. Default value &amp;quot;header:Authorization&amp;quot;.
  // Possible values:
  // - &amp;quot;header:&amp;lt;name&amp;gt;&amp;quot;
  // - &amp;quot;form:&amp;lt;name&amp;gt;&amp;quot;
  TokenLookup string `json:&amp;quot;token_lookup&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultJWTConfig = JWTConfig{
  SigningMethod: AlgorithmHS256,
  ContextKey:    &amp;quot;user&amp;quot;,
  TokenLookup:   &amp;quot;header:&amp;quot; + echo.HeaderAuthorization,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.JWT([]byte(&amp;quot;secret&amp;quot;))&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.JWTWithConfig(middleware.JWTConfig{
  SigningKey: []byte(&amp;quot;secret&amp;quot;),
  TokenLookup: &amp;quot;query:token&amp;quot;,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-1#&#34;&gt;[Recipe](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logger</title>
      <link>https://echo.labstack.com/middleware/logger</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/logger</guid>
      <description>

&lt;h2 id=&#34;logger-middleware&#34;&gt;Logger Middleware&lt;/h2&gt;

&lt;p&gt;Logger middleware logs the information about each HTTP request.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;LoggerConfig struct {
  // Log format which can be constructed using the following tags:
  //
  // - time_rfc3339
  // - id (Request ID - Not implemented)
  // - remote_ip
  // - uri
  // - host
  // - method
  // - path
  // - referer
  // - user_agent
  // - status
  // - latency (In microseconds)
  // - latency_human (Human readable)
  // - rx_bytes (Bytes received)
  // - tx_bytes (Bytes sent)
  //
  // Example &amp;quot;${remote_ip} ${status}&amp;quot;
  //
  // Optional. Default value DefaultLoggerConfig.Format.
  Format string

  // Output is a writer where logs are written.
  // Optional. Default value os.Stdout.
  Output io.Writer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultLoggerConfig = LoggerConfig{
  Format: `{&amp;quot;time&amp;quot;:&amp;quot;${time_rfc3339}&amp;quot;,&amp;quot;remote_ip&amp;quot;:&amp;quot;${remote_ip}&amp;quot;,` +
    `&amp;quot;method&amp;quot;:&amp;quot;${method}&amp;quot;,&amp;quot;uri&amp;quot;:&amp;quot;${uri}&amp;quot;,&amp;quot;status&amp;quot;:${status}, &amp;quot;latency&amp;quot;:${latency},` +
    `&amp;quot;latency_human&amp;quot;:&amp;quot;${latency_human}&amp;quot;,&amp;quot;rx_bytes&amp;quot;:${rx_bytes},` +
    `&amp;quot;tx_bytes&amp;quot;:${tx_bytes}}` + &amp;quot;\n&amp;quot;,
  color:  color.New(),
  Output: os.Stdout,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.Logger())&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Output&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&amp;quot;time&amp;quot;:&amp;quot;2016-05-10T07:02:25-07:00&amp;quot;,&amp;quot;remote_ip&amp;quot;:&amp;quot;::1&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;GET&amp;quot;,&amp;quot;uri&amp;quot;:&amp;quot;/&amp;quot;,&amp;quot;status&amp;quot;:200, &amp;quot;latency&amp;quot;:55653,&amp;quot;latency_human&amp;quot;:&amp;quot;55.653µs&amp;quot;,&amp;quot;rx_bytes&amp;quot;:0,&amp;quot;tx_bytes&amp;quot;:13}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
  Format: &amp;quot;method=${method}, uri=${uri}, status=${status}\n&amp;quot;,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example above uses a &lt;code&gt;Format&lt;/code&gt; which logs request method and request URI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Output&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;method=GET, uri=/hello, status=200
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Method Override</title>
      <link>https://echo.labstack.com/middleware/method-override</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/method-override</guid>
      <description>

&lt;h2 id=&#34;methodoverride-middleware&#34;&gt;MethodOverride Middleware&lt;/h2&gt;

&lt;p&gt;MethodOverride middleware checks for the overridden method from the request and
uses it instead of the original method.&lt;/p&gt;

&lt;p&gt;For security reasons, only &lt;code&gt;POST&lt;/code&gt; method can be overridden.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;MethodOverrideConfig struct {
  // Getter is a function that gets overridden method from the request.
  // Optional. Default values MethodFromHeader(echo.HeaderXHTTPMethodOverride).
  Getter MethodOverrideGetter
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultMethodOverrideConfig = MethodOverrideConfig{
  Getter: MethodFromHeader(echo.HeaderXHTTPMethodOverride),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Pre(middleware.MethodOverride())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Pre(middleware.MethodOverrideWithConfig(middleware.MethodOverrideConfig{
  Getter: middleware.MethodFromForm(&amp;quot;_method&amp;quot;),
}))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://echo.labstack.com/middleware/overview</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/overview</guid>
      <description>

&lt;h2 id=&#34;middleware-overview&#34;&gt;Middleware Overview&lt;/h2&gt;

&lt;p&gt;Middleware is a function chained in the HTTP request-response cycle with access
to &lt;code&gt;Echo#Context&lt;/code&gt; which it uses to perform a specific action, for example, logging
every request or limiting the number of requests.&lt;/p&gt;

&lt;p&gt;Handler is processed in the end after all middleware are finished executing.&lt;/p&gt;

&lt;h3 id=&#34;middleware-levels&#34;&gt;Middleware Levels&lt;/h3&gt;

&lt;h4 id=&#34;root-level-before-router&#34;&gt;Root Level (Before router)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Echo#Pre()&lt;/code&gt; can be used to register a middleware which is executed before router
processes the request. It is helpful to make any changes to the request properties,
for example, adding or removing a trailing slash from the path so it matches the
route.&lt;/p&gt;

&lt;p&gt;The following built-in middleware should be registered at this level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AddTrailingSlash&lt;/li&gt;
&lt;li&gt;RemoveTrailingSlash&lt;/li&gt;
&lt;li&gt;MethodOverride&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: As router has not processed the request, middleware at this level won&amp;rsquo;t
have access to any path related API from &lt;code&gt;echo.Context&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;root-level-after-router&#34;&gt;Root Level (After router)&lt;/h4&gt;

&lt;p&gt;Most of the time you will register a middleware at this level using &lt;code&gt;Echo#Use()&lt;/code&gt;.
This middleware is executed after router processes the request and has full access
to &lt;code&gt;echo.Context&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;The following built-in middleware should be registered at this level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BodyLimit&lt;/li&gt;
&lt;li&gt;Logger&lt;/li&gt;
&lt;li&gt;Gzip&lt;/li&gt;
&lt;li&gt;Recover&lt;/li&gt;
&lt;li&gt;BasicAuth&lt;/li&gt;
&lt;li&gt;JWTAuth&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;CORS&lt;/li&gt;
&lt;li&gt;Static&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;group-level&#34;&gt;Group Level&lt;/h4&gt;

&lt;p&gt;When creating a new group, you can register middleware just for that group. For
example, you can have an admin group which is secured by registering a BasicAuth
middleware for it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
admin := e.Group(&amp;quot;/admin&amp;quot;, middleware.BasicAuth())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also add a middleware after creating a group via &lt;code&gt;admin.Use()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;route-level&#34;&gt;Route Level&lt;/h4&gt;

&lt;p&gt;When defining a new route, you can optionally register middleware just for it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.GET(&amp;quot;/&amp;quot;, &amp;lt;Handler&amp;gt;, &amp;lt;Middleware...&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;{#HUGOSHORTCODE-1#&#34;&gt;[Writing Custom Middleware](&lt;/h3&gt;

&lt;p&gt;#})&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recover</title>
      <link>https://echo.labstack.com/middleware/recover</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/recover</guid>
      <description>

&lt;h2 id=&#34;recover-middleware&#34;&gt;Recover Middleware&lt;/h2&gt;

&lt;p&gt;Recover middleware recovers from panics anywhere in the chain, prints stack trace
and handles the control to the centralized
&lt;a href=&#34;https://echo.labstack.com/guide/customization#http-error-handler&#34;&gt;HTTPErrorHandler&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;RecoverConfig struct {
  // Size of the stack to be printed.
  // Optional. Default value 4KB.
  StackSize int

  // DisableStackAll disables formatting stack traces of all other goroutines
  // into buffer after the trace for the current goroutine.
  // Optional. Default value false.
  DisableStackAll bool

  // DisablePrintStack disables printing stack trace.
  // Optional. Default value as false.
  DisablePrintStack bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultRecoverConfig = RecoverConfig{
	StackSize:  4 &amp;lt;&amp;lt; 10, // 4 KB
	StackAll:   true,
	PrintStack: true,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.Recover())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.RecoverWithConfig(middleware.RecoverConfig{
  StackSize:  1 &amp;lt;&amp;lt; 10, // 1 KB
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example above uses a &lt;code&gt;StackSize&lt;/code&gt; of 1 KB and default values for &lt;code&gt;DisableStackAll&lt;/code&gt;
and &lt;code&gt;DisablePrintStack&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remove Trailing Slash</title>
      <link>https://echo.labstack.com/middleware/remove-trailing-slash</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/remove-trailing-slash</guid>
      <description>

&lt;h2 id=&#34;removetrailingslash-middleware&#34;&gt;RemoveTrailingSlash Middleware&lt;/h2&gt;

&lt;p&gt;RemoveTrailingSlash middleware removes a trailing slash from the request URI.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;TrailingSlashConfig struct {
  // Status code to be used when redirecting the request.
  // Optional, but when provided the request is redirected using this code.
  RedirectCode int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Pre(middleware.RemoveTrailingSlash())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.RemoveTrailingSlashWithConfig(TrailingSlashConfig{
  RedirectCode: http.StatusMovedPermanently,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will remove a trailing slash from the request URI and redirect with &lt;code&gt;StatusMovedPermanently&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure</title>
      <link>https://echo.labstack.com/middleware/secure</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/secure</guid>
      <description>

&lt;h2 id=&#34;secure-middleware&#34;&gt;Secure Middleware&lt;/h2&gt;

&lt;p&gt;Secure middleware provides protection against cross-site scripting (XSS) attack,
content type sniffing, clickjacking, insecure connection and other code injection
attacks.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;SecureConfig struct {
  // XSSProtection provides protection against cross-site scripting attack (XSS)
  // by setting the `X-XSS-Protection` header.
  // Optional. Default value &amp;quot;1; mode=block&amp;quot;.
  XSSProtection string

  // ContentTypeNosniff provides protection against overriding Content-Type
  // header by setting the `X-Content-Type-Options` header.
  // Optional. Default value &amp;quot;nosniff&amp;quot;.
  ContentTypeNosniff string

  // XFrameOptions can be used to indicate whether or not a browser should
  // be allowed to render a page in a &amp;lt;frame&amp;gt;, &amp;lt;iframe&amp;gt; or &amp;lt;object&amp;gt; .
  // Sites can use this to avoid clickjacking attacks, by ensuring that their
  // content is not embedded into other sites.provides protection against
  // clickjacking.
  // Optional. Default value &amp;quot;SAMEORIGIN&amp;quot;.
  // Possible values:
  // `SAMEORIGIN` - The page can only be displayed in a frame on the same origin as the page itself.
  // `DENY` - The page cannot be displayed in a frame, regardless of the site attempting to do so.
  // `ALLOW-FROM uri` - The page can only be displayed in a frame on the specified origin.
  XFrameOptions string

  // HSTSMaxAge sets the `Strict-Transport-Security` header to indicate how
  // long (in seconds) browsers should remember that this site is only to
  // be accessed using HTTPS. This reduces your exposure to some SSL-stripping
  // man-in-the-middle (MITM) attacks.
  // Optional. Default value 0.
  HSTSMaxAge int

  // HSTSExcludeSubdomains won&#39;t include subdomains tag in the `Strict Transport Security`
  // header, excluding all subdomains from security policy. It has no effect
  // unless HSTSMaxAge is set to a non-zero value.
  // Optional. Default value false.
  HSTSExcludeSubdomains bool

  // ContentSecurityPolicy sets the `Content-Security-Policy` header providing
  // security against cross-site scripting (XSS), clickjacking and other code
  // injection attacks resulting from execution of malicious content in the
  // trusted web page context.
  // Optional. Default value &amp;quot;&amp;quot;.
  ContentSecurityPolicy string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultSecureConfig = SecureConfig{
  XSSProtection:      &amp;quot;1; mode=block&amp;quot;,
  ContentTypeNosniff: &amp;quot;nosniff&amp;quot;,
  XFrameOptions:      &amp;quot;SAMEORIGIN&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.Use(middleware.Secure())&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.SecureWithConfig(middleware.SecureConfig{
	XSSProtection:         &amp;quot;&amp;quot;,
	ContentTypeNosniff:    &amp;quot;&amp;quot;,
	XFrameOptions:         &amp;quot;&amp;quot;,
	HSTSMaxAge:            3600,
	ContentSecurityPolicy: &amp;quot;default-src &#39;self&#39;&amp;quot;,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing empty &lt;code&gt;XSSProtection&lt;/code&gt;, &lt;code&gt;ContentTypeNosniff&lt;/code&gt;, &lt;code&gt;XFrameOptions&lt;/code&gt; or &lt;code&gt;ContentSecurityPolicy&lt;/code&gt;
disables that protection.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static</title>
      <link>https://echo.labstack.com/middleware/static</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/middleware/static</guid>
      <description>

&lt;h2 id=&#34;static-middleware&#34;&gt;Static Middleware&lt;/h2&gt;

&lt;p&gt;Static middleware can be used to serve static files from the provided root directory.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;StaticConfig struct {
  // Root directory from where the static content is served.
  // Required.
  Root string `json:&amp;quot;root&amp;quot;`

  // Index file for serving a directory.
  // Optional. Default value &amp;quot;index.html&amp;quot;.
  Index string `json:&amp;quot;index&amp;quot;`

  // Enable HTML5 mode by forwarding all not-found requests to root so that
  // SPA (single-page application) can handle the routing.
  // Optional. Default value false.
  HTML5 bool `json:&amp;quot;html5&amp;quot;`

  // Enable directory browsing.
  // Optional. Default value false.
  Browse bool `json:&amp;quot;browse&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-configuration&#34;&gt;Default Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;DefaultStaticConfig = StaticConfig{
  Index: &amp;quot;index.html&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.Static(&amp;quot;/static&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This serves static files from &lt;code&gt;static&lt;/code&gt; directory. For example, a request to &lt;code&gt;/js/main.js&lt;/code&gt;
will fetch and serve &lt;code&gt;static/js/main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&#34;custom-configuration&#34;&gt;Custom Configuration&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := echo.New()
e.Use(middleware.StaticWithConfig(middleware.StaticConfig{
  Root:   &amp;quot;static&amp;quot;,
  Browse: true,
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This serves static files from &lt;code&gt;static&lt;/code&gt; directory and enables directory browsing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>